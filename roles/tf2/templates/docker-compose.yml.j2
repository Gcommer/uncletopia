version: '3.7'

# Maybe possible to do with scaling mode?
services:
{% for service in services %}
  srcds-{{ service.server_name_short }}:
    image: leighmacdonald/uncletopia-srcds:latest
    network_mode: host    
    deploy:
      restart_policy:
        condition: any
        delay: 5s
      # cpuset = docker-compose 2.x only.... ?
      #   resources:
      #     cpuset: {{ loop.index0 * 2 }},{{ (loop.index0 * 2)+1 }}
    ports:
      - "{{ service.port }}:{{ service.port }}/tcp"
      - "{{ service.port }}:{{ service.port }}/udp"
    volumes:
      #- tf2data-{{ service.server_name_short }}:/home/steam/tf-dedicated/
      - ./build/server.cfg:/home/steam/tf-dedicated/tf/cfg/server.cfg
      - ./build/admins_simple.ini:/home/steam/tf-dedicated/tf/addons/sourcemod/configs/admins_simple.ini
      - ./build/umc_mapcycle.txt:/home/steam/tf-dedicated/tf/umc_mapcycle.txt
      - ./build/umc_mapcycle_nominate.txt:/home/steam/tf-dedicated/tf/umc_mapcycle_nominate.txt
      - ./build/motd.txt:/home/steam/tf-dedicated/tf/cfg/motd.txt
      - ./build/mapcycle_halloween.txt:/home/steam/tf-dedicated/tf/cfg/mapcycle_halloween.txt
      - ./build/pure_server_whitelist.txt:/home/steam/tf-dedicated/tf/cfg/pure_server_whitelist.txt
      - ./build/cronjobs.txt:/home/steam/tf-dedicated/tf/cfg/cronjobs.txt
      - ./build/sourcemod.cfg:/home/steam/tf-dedicated/tf/cfg/sourcemod/sourcemod.cfg
      - ./build/admin_overrides.cfg:/home/steam/tf-dedicated/tf/addons/sourcemod/configs/admin_overrides.cfg
      - ./build/gbans.cfg:/home/steam/tf-dedicated/tf/addons/sourcemod/configs/gbans.cfg
    environment:
      - SRCDS_TOKEN="{{ service.gslt }}"
      - SRCDS_PORT="{{ service.port }}"
      - SRCDS_REGION="{{ sv_region }}"
      - SRCDS_HOSTNAME="{{ service.name }}"
      - SRCDS_PW="{{ server_password }}"
      - SRCDS_STARTMAP="{{ start_map }}"
      - SRCDS_RCONPW="{{ rcon_password }}"
      - SRCDS_IP="{{ ip }}"

{% endfor %}

# Note we are using separate volumes here since we probably dont want them updating ontop of eachother
# volumes:
# {% for service in services %}
#   tf2data-{{ service.server_name_short }}:
# {% endfor %}